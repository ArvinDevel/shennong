package me.jinsui.shennong.bench.source;

import com.google.common.util.concurrent.RateLimiter;
import io.airlift.tpch.Order;
import io.airlift.tpch.OrderGenerator;
import java.util.Iterator;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import me.jinsui.shennong.bench.avro.Orders;
import org.apache.avro.generic.GenericRecord;

/**
 * Return data generated by tpch dbgen facility.
 */
@Slf4j
public class TpchDataSourceFactory {

    public static DataSource<GenericRecord> getTblDataSource(double rate, String tbl, int scaleFactor) {
        switch (tbl) {
            case "orders":
                return new OrdersDataSource(rate, scaleFactor);
            default:
                log.error("Specified Wrong tpch table {} existing...", tbl);
                System.exit(-1);
                return null;
        }
    }

    public static class OrdersDataSource implements DataSource<GenericRecord> {
        @Getter
        private Iterator<Order> iterator;
        private final RateLimiter rateLimiter;
        private int msgSize;

        public OrdersDataSource(double rate, int scaleFactor) {
            this.rateLimiter = RateLimiter.create(rate);
            this.iterator = new OrderGenerator(scaleFactor, 1, 1).iterator();
            this.msgSize = 8 + 8 + 1 + 8 + 4 + 15 + 15 + 4 + 79;
        }

        @Override
        public boolean hasNext() {
            return rateLimiter.tryAcquire(msgSize) && iterator.hasNext();
        }

        public GenericRecord getNext() {
            Order order = iterator.next();
            return Orders.newBuilder()
                .setOrderkey(order.getOrderKey())
                .setCustkey(order.getCustomerKey())
                .setOrderstatus(order.getOrderStatus() == 'O')
                .setTotalprice(order.getTotalPrice())
                .setOrderdate(order.getOrderDate())
                .setOrderpriority(order.getOrderPriority())
                .setClerk(order.getClerk())
                .setShippriority(order.getShipPriority())
                .setComment(order.getComment())
                .build();
        }

        @Override
        public int getEventSize() {
            return msgSize;
        }
    }
}
